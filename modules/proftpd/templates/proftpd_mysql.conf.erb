<% if @mysqlhost %>
<IfModule mod_sql.c>

  AuthOrder mod_sql.c
  SQLAuthTypes Plaintext

  # We need our "default" connection to the userdb database
  SQLConnectInfo <%= @mysqldb %>@<%= @mysqlhost %>:<%= @mysqlport %> <%= @mysqlacc %> <%= @mysqlpsw %>

  # Now that we have a default connection, we can create another connection, named "logdb" and using the "mysql" backend, to the logdb database
  #SQLNamedConnectInfo conn_log mysql <%= @mysqldb %>@<%= @mysqlhost %>:<%= @mysqlport %> <%= @mysqlacc %> <%= @mysqlpsw %>
  #SQLNamedQuery log_sess FREEFORM "INSERT INTO login_history (userid, client_ip, server_ip, protocol, login_time) VALUES ('%u', '%a', '%V', '%{protocol}', NOW())" conn_log

  # Define the authenticate method
  SQLAuthenticate users groups usersetfast groupsetfast

  # Point mod_sql at our users/groups tables
  SQLUserInfo custom:/get-user-by-name/get-user-by-id/get-user-names/get-all-users
  #SQLUserInfo users userid passwd uid gid homedir shell
  SQLNamedQuery get-user-by-name SELECT "userid, passwd, uid, gid, homedir, shell FROM users WHERE userid = '%U'"
  SQLNamedQuery get-user-by-id SELECT "userid, passwd, uid, gid, homedir, shell FROM users WHERE uid = %{0}"
  SQLNamedQuery get-user-names SELECT "userid FROM users"
  SQLNamedQuery get-all-users SELECT "userid, passwd, uid, gid, homedir, shell FROM users"

  SQLGroupInfo custom:/get-group-by-name/get-group-by-id/get-group-by-member/get-all-groupnames/get-all-groups
  #SQLGroupInfo groups groupname gid members
  SQLNamedQuery get-group-by-name SELECT "groupname, gid, members FROM groups WHERE groupname = '%{0}'"
  SQLNamedQuery get-group-by-id SELECT "groupname, gid, members FROM groups WHERE gid = %{0}"
  SQLNamedQuery get-group-by-member SELECT "groupname, gid, members FROM groups WHERE (members LIKE '%%,%{0},%%' OR members LIKE '%{0},%%' OR members LIKE '%%,%{0}')"
  SQLNamedQuery get-all-groupnames SELECT "groupname FROM groups"
  SQLNamedQuery get-all-groups SELECT "groupname, gid, members FROM groups"

  # Update the users.last_accessed column on successful login in the db
  SQLLog PASS last_accessed IGNORE_ERRORS
  SQLNamedQuery last_accessed UPDATE "last_accessed = NOW() WHERE userid='%u'" users

  # Update the users.login_count column on successful login in the db
  SQLLog PASS login_count IGNORE_ERRORS
  SQLNamedQuery login_count UPDATE "login_count=login_count+1 WHERE userid='%u'" users

  # Add a row to the login_history table on successful login in the db
  SQLLog PASS log_sess IGNORE_ERRORS
  SQLNamedQuery log_sess FREEFORM "INSERT INTO login_history (userid, client_ip, server_ip, protocol, login_time) VALUES ('%u', '%a', '%V', '%{protocol}', NOW())"

</IfModule>
<% end %>